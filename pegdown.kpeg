%% name = Pegdown

%% {
  def self.parse text
    parser = new text

    parser.raise_error unless parser.parse

    parser.result
  end

  def extension code
    false
  end
}

root = Doc

Doc =       BOM? Block*:a { RDoc::Markup::Document.new(*a) }

Block =     BlankLine*
            ( BlockQuote
            | Verbatim
            | Note
            | Reference
            | HorizontalRule
            | Heading
            | OrderedList
            | BulletList
            | HtmlBlock
            | StyleBlock
            | Para
            | Plain )

Para =      NonindentSpace Inlines:a BlankLine+
            { RDoc::Markup::Paragraph.new(*a) }

Plain =     Inlines:a
            { RDoc::Markup::Paragraph.new(*a) }

AtxInline = !Newline !(Sp? "#"* Sp Newline) Inline

AtxStart =  < ( "######" | "#####" | "####" | "###" | "##" | "#" ) >
            { text.length }

AtxHeading = AtxStart:s Sp? AtxInline+:a (Sp? "#"* Sp)?  Newline
            { RDoc::Markup::Heading.new(s, *a) }

SetextHeading = SetextHeading1 | SetextHeading2

SetextBottom1 = "===" "="* Newline

SetextBottom2 = "---" "-"* Newline

SetextHeading1 =  &(RawLine SetextBottom1)
                  StartList:a ( !Endline Inline:a )+ Sp? Newline
                  SetextBottom1
                  { RDoc::Markup::Heading.new(1, *a) }

SetextHeading2 =  &(RawLine SetextBottom2)
                  StartList:a ( !Endline Inline:a )+ Sp? Newline
                  SetextBottom2
                  { RDoc::Markup::Heading.new(2, *a) }

Heading = SetextHeading | AtxHeading

BlockQuote = BlockQuoteRaw:a
             {  raise "$$ = mk_element(BLOCKQUOTE);
                $$->children = a;"
             }

BlockQuoteRaw =  StartList:a
                 (( ">" " "? Line { raise " a = cons($$, a); " } )
                  ( !">" !BlankLine Line { raise " a = cons($$, a); " } )*
                  ( BlankLine { raise ' a = cons(mk_str("\n"), a); ' } )*
                 )+
                 {   raise '$$ = mk_str_from_list(a, true);
                     $$->key = RAW;'
                 }

NonblankIndentedLine = !BlankLine IndentedLine

VerbatimChunk = BlankLine*:a
                NonblankIndentedLine+:b
                { a.push(*b) }

Verbatim =     VerbatimChunk+:a
               { RDoc::Markup::Verbatim.new(*a) }

HorizontalRule = NonindentSpace
                 ( "*" Sp "*" Sp "*" (Sp "*")*
                 | "-" Sp "-" Sp "-" (Sp "-")*
                 | "_" Sp "_" Sp "_" (Sp "_")*)
                 Sp Newline BlankLine+
                 { RDoc::Markup::Rule.new 1 }

Bullet = !HorizontalRule NonindentSpace ("+" | "*" | "-") Spacechar+

BulletList = &Bullet (ListTight | ListLoose):a
             { RDoc::Markup::List.new(:BULLET, *a) }

ListTight = ListItemTight+:a
            BlankLine* !(Bullet | Enumerator)
            { a }

ListLoose = StartList:a
            ( b:listItem BlankLine*
              {   raise 'element *li;
                  li = b->children;
                  li->contents.str = realloc(li->contents.str, strlen(li->contents.str) + 3);
                  strcat(li->contents.str, "\n\n");  /* In loose list, \n\n added to end of each element */
                  a = cons(b, a);'
              } )+
            { raise " $$ = mk_list(LIST, a); " }

ListItem =  ( Bullet | Enumerator )
            StartList:a
            ListBlock { raise " a = cons($$, a); " }
            ( ListContinuationBlock { raise " a = cons($$, a); " } )*
            {  raise 'element *raw;
               raw = mk_str_from_list(a, false);
               raw->key = RAW;
               $$ = mk_element(LISTITEM);
               $$->children = raw;'
            }

ListItemTight =
            ( Bullet | Enumerator )
            ListBlock:a
            ( !BlankLine
              ListContinuationBlock { raise " a = cons($$, a); " } )*
            !ListContinuationBlock
            { RDoc::Markup::ListItem.new(nil, a) }

ListBlock = !BlankLine Line:a
            ListBlockLine*:c
            { RDoc::Markup::Paragraph.new(a, *c) }

ListContinuationBlock = StartList:a
                        ( < BlankLine* >
                          { a << (text.empty? ? "\001" : text) } )
                        ( Indent ListBlock { raise " a = cons($$, a); " } )+
                        { raise "  $$ = mk_str_from_list(a, false); " }

Enumerator = NonindentSpace [0-9]+ "." Spacechar+

OrderedList = &Enumerator (ListTight | ListLoose):a
             { RDoc::Markup::List.new(:BULLET, *a) }

ListBlockLine = !BlankLine
                !( Indent? (Bullet | Enumerator) )
                !HorizontalRule
                OptionallyIndentedLine

# Parsers for different kinds of block-level HTML content.
# This is repetitive due to constraints of PEG grammar.

HtmlBlockOpenAddress = "<" Spnl ("address" | "ADDRESS") Spnl HtmlAttribute* ">"
HtmlBlockCloseAddress = "<" Spnl "/" ("address" | "ADDRESS") Spnl ">"
HtmlBlockAddress = HtmlBlockOpenAddress (HtmlBlockAddress | !HtmlBlockCloseAddress .)* HtmlBlockCloseAddress

HtmlBlockOpenBlockquote = "<" Spnl ("blockquote" | "BLOCKQUOTE") Spnl HtmlAttribute* ">"
HtmlBlockCloseBlockquote = "<" Spnl "/" ("blockquote" | "BLOCKQUOTE") Spnl ">"
HtmlBlockBlockquote = HtmlBlockOpenBlockquote (HtmlBlockBlockquote | !HtmlBlockCloseBlockquote .)* HtmlBlockCloseBlockquote

HtmlBlockOpenCenter = "<" Spnl ("center" | "CENTER") Spnl HtmlAttribute* ">"
HtmlBlockCloseCenter = "<" Spnl "/" ("center" | "CENTER") Spnl ">"
HtmlBlockCenter = HtmlBlockOpenCenter (HtmlBlockCenter | !HtmlBlockCloseCenter .)* HtmlBlockCloseCenter

HtmlBlockOpenDir = "<" Spnl ("dir" | "DIR") Spnl HtmlAttribute* ">"
HtmlBlockCloseDir = "<" Spnl "/" ("dir" | "DIR") Spnl ">"
HtmlBlockDir = HtmlBlockOpenDir (HtmlBlockDir | !HtmlBlockCloseDir .)* HtmlBlockCloseDir

HtmlBlockOpenDiv = "<" Spnl ("div" | "DIV") Spnl HtmlAttribute* ">"
HtmlBlockCloseDiv = "<" Spnl "/" ("div" | "DIV") Spnl ">"
HtmlBlockDiv = HtmlBlockOpenDiv (HtmlBlockDiv | !HtmlBlockCloseDiv .)* HtmlBlockCloseDiv

HtmlBlockOpenDl = "<" Spnl ("dl" | "DL") Spnl HtmlAttribute* ">"
HtmlBlockCloseDl = "<" Spnl "/" ("dl" | "DL") Spnl ">"
HtmlBlockDl = HtmlBlockOpenDl (HtmlBlockDl | !HtmlBlockCloseDl .)* HtmlBlockCloseDl

HtmlBlockOpenFieldset = "<" Spnl ("fieldset" | "FIELDSET") Spnl HtmlAttribute* ">"
HtmlBlockCloseFieldset = "<" Spnl "/" ("fieldset" | "FIELDSET") Spnl ">"
HtmlBlockFieldset = HtmlBlockOpenFieldset (HtmlBlockFieldset | !HtmlBlockCloseFieldset .)* HtmlBlockCloseFieldset

HtmlBlockOpenForm = "<" Spnl ("form" | "FORM") Spnl HtmlAttribute* ">"
HtmlBlockCloseForm = "<" Spnl "/" ("form" | "FORM") Spnl ">"
HtmlBlockForm = HtmlBlockOpenForm (HtmlBlockForm | !HtmlBlockCloseForm .)* HtmlBlockCloseForm

HtmlBlockOpenH1 = "<" Spnl ("h1" | "H1") Spnl HtmlAttribute* ">"
HtmlBlockCloseH1 = "<" Spnl "/" ("h1" | "H1") Spnl ">"
HtmlBlockH1 = HtmlBlockOpenH1 (HtmlBlockH1 | !HtmlBlockCloseH1 .)* HtmlBlockCloseH1

HtmlBlockOpenH2 = "<" Spnl ("h2" | "H2") Spnl HtmlAttribute* ">"
HtmlBlockCloseH2 = "<" Spnl "/" ("h2" | "H2") Spnl ">"
HtmlBlockH2 = HtmlBlockOpenH2 (HtmlBlockH2 | !HtmlBlockCloseH2 .)* HtmlBlockCloseH2

HtmlBlockOpenH3 = "<" Spnl ("h3" | "H3") Spnl HtmlAttribute* ">"
HtmlBlockCloseH3 = "<" Spnl "/" ("h3" | "H3") Spnl ">"
HtmlBlockH3 = HtmlBlockOpenH3 (HtmlBlockH3 | !HtmlBlockCloseH3 .)* HtmlBlockCloseH3

HtmlBlockOpenH4 = "<" Spnl ("h4" | "H4") Spnl HtmlAttribute* ">"
HtmlBlockCloseH4 = "<" Spnl "/" ("h4" | "H4") Spnl ">"
HtmlBlockH4 = HtmlBlockOpenH4 (HtmlBlockH4 | !HtmlBlockCloseH4 .)* HtmlBlockCloseH4

HtmlBlockOpenH5 = "<" Spnl ("h5" | "H5") Spnl HtmlAttribute* ">"
HtmlBlockCloseH5 = "<" Spnl "/" ("h5" | "H5") Spnl ">"
HtmlBlockH5 = HtmlBlockOpenH5 (HtmlBlockH5 | !HtmlBlockCloseH5 .)* HtmlBlockCloseH5

HtmlBlockOpenH6 = "<" Spnl ("h6" | "H6") Spnl HtmlAttribute* ">"
HtmlBlockCloseH6 = "<" Spnl "/" ("h6" | "H6") Spnl ">"
HtmlBlockH6 = HtmlBlockOpenH6 (HtmlBlockH6 | !HtmlBlockCloseH6 .)* HtmlBlockCloseH6

HtmlBlockOpenMenu = "<" Spnl ("menu" | "MENU") Spnl HtmlAttribute* ">"
HtmlBlockCloseMenu = "<" Spnl "/" ("menu" | "MENU") Spnl ">"
HtmlBlockMenu = HtmlBlockOpenMenu (HtmlBlockMenu | !HtmlBlockCloseMenu .)* HtmlBlockCloseMenu

HtmlBlockOpenNoframes = "<" Spnl ("noframes" | "NOFRAMES") Spnl HtmlAttribute* ">"
HtmlBlockCloseNoframes = "<" Spnl "/" ("noframes" | "NOFRAMES") Spnl ">"
HtmlBlockNoframes = HtmlBlockOpenNoframes (HtmlBlockNoframes | !HtmlBlockCloseNoframes .)* HtmlBlockCloseNoframes

HtmlBlockOpenNoscript = "<" Spnl ("noscript" | "NOSCRIPT") Spnl HtmlAttribute* ">"
HtmlBlockCloseNoscript = "<" Spnl "/" ("noscript" | "NOSCRIPT") Spnl ">"
HtmlBlockNoscript = HtmlBlockOpenNoscript (HtmlBlockNoscript | !HtmlBlockCloseNoscript .)* HtmlBlockCloseNoscript

HtmlBlockOpenOl = "<" Spnl ("ol" | "OL") Spnl HtmlAttribute* ">"
HtmlBlockCloseOl = "<" Spnl "/" ("ol" | "OL") Spnl ">"
HtmlBlockOl = HtmlBlockOpenOl (HtmlBlockOl | !HtmlBlockCloseOl .)* HtmlBlockCloseOl

HtmlBlockOpenP = "<" Spnl ("p" | "P") Spnl HtmlAttribute* ">"
HtmlBlockCloseP = "<" Spnl "/" ("p" | "P") Spnl ">"
HtmlBlockP = HtmlBlockOpenP (HtmlBlockP | !HtmlBlockCloseP .)* HtmlBlockCloseP

HtmlBlockOpenPre = "<" Spnl ("pre" | "PRE") Spnl HtmlAttribute* ">"
HtmlBlockClosePre = "<" Spnl "/" ("pre" | "PRE") Spnl ">"
HtmlBlockPre = HtmlBlockOpenPre (HtmlBlockPre | !HtmlBlockClosePre .)* HtmlBlockClosePre

HtmlBlockOpenTable = "<" Spnl ("table" | "TABLE") Spnl HtmlAttribute* ">"
HtmlBlockCloseTable = "<" Spnl "/" ("table" | "TABLE") Spnl ">"
HtmlBlockTable = HtmlBlockOpenTable (HtmlBlockTable | !HtmlBlockCloseTable .)* HtmlBlockCloseTable

HtmlBlockOpenUl = "<" Spnl ("ul" | "UL") Spnl HtmlAttribute* ">"
HtmlBlockCloseUl = "<" Spnl "/" ("ul" | "UL") Spnl ">"
HtmlBlockUl = HtmlBlockOpenUl (HtmlBlockUl | !HtmlBlockCloseUl .)* HtmlBlockCloseUl

HtmlBlockOpenDd = "<" Spnl ("dd" | "DD") Spnl HtmlAttribute* ">"
HtmlBlockCloseDd = "<" Spnl "/" ("dd" | "DD") Spnl ">"
HtmlBlockDd = HtmlBlockOpenDd (HtmlBlockDd | !HtmlBlockCloseDd .)* HtmlBlockCloseDd

HtmlBlockOpenDt = "<" Spnl ("dt" | "DT") Spnl HtmlAttribute* ">"
HtmlBlockCloseDt = "<" Spnl "/" ("dt" | "DT") Spnl ">"
HtmlBlockDt = HtmlBlockOpenDt (HtmlBlockDt | !HtmlBlockCloseDt .)* HtmlBlockCloseDt

HtmlBlockOpenFrameset = "<" Spnl ("frameset" | "FRAMESET") Spnl HtmlAttribute* ">"
HtmlBlockCloseFrameset = "<" Spnl "/" ("frameset" | "FRAMESET") Spnl ">"
HtmlBlockFrameset = HtmlBlockOpenFrameset (HtmlBlockFrameset | !HtmlBlockCloseFrameset .)* HtmlBlockCloseFrameset

HtmlBlockOpenLi = "<" Spnl ("li" | "LI") Spnl HtmlAttribute* ">"
HtmlBlockCloseLi = "<" Spnl "/" ("li" | "LI") Spnl ">"
HtmlBlockLi = HtmlBlockOpenLi (HtmlBlockLi | !HtmlBlockCloseLi .)* HtmlBlockCloseLi

HtmlBlockOpenTbody = "<" Spnl ("tbody" | "TBODY") Spnl HtmlAttribute* ">"
HtmlBlockCloseTbody = "<" Spnl "/" ("tbody" | "TBODY") Spnl ">"
HtmlBlockTbody = HtmlBlockOpenTbody (HtmlBlockTbody | !HtmlBlockCloseTbody .)* HtmlBlockCloseTbody

HtmlBlockOpenTd = "<" Spnl ("td" | "TD") Spnl HtmlAttribute* ">"
HtmlBlockCloseTd = "<" Spnl "/" ("td" | "TD") Spnl ">"
HtmlBlockTd = HtmlBlockOpenTd (HtmlBlockTd | !HtmlBlockCloseTd .)* HtmlBlockCloseTd

HtmlBlockOpenTfoot = "<" Spnl ("tfoot" | "TFOOT") Spnl HtmlAttribute* ">"
HtmlBlockCloseTfoot = "<" Spnl "/" ("tfoot" | "TFOOT") Spnl ">"
HtmlBlockTfoot = HtmlBlockOpenTfoot (HtmlBlockTfoot | !HtmlBlockCloseTfoot .)* HtmlBlockCloseTfoot

HtmlBlockOpenTh = "<" Spnl ("th" | "TH") Spnl HtmlAttribute* ">"
HtmlBlockCloseTh = "<" Spnl "/" ("th" | "TH") Spnl ">"
HtmlBlockTh = HtmlBlockOpenTh (HtmlBlockTh | !HtmlBlockCloseTh .)* HtmlBlockCloseTh

HtmlBlockOpenThead = "<" Spnl ("thead" | "THEAD") Spnl HtmlAttribute* ">"
HtmlBlockCloseThead = "<" Spnl "/" ("thead" | "THEAD") Spnl ">"
HtmlBlockThead = HtmlBlockOpenThead (HtmlBlockThead | !HtmlBlockCloseThead .)* HtmlBlockCloseThead

HtmlBlockOpenTr = "<" Spnl ("tr" | "TR") Spnl HtmlAttribute* ">"
HtmlBlockCloseTr = "<" Spnl "/" ("tr" | "TR") Spnl ">"
HtmlBlockTr = HtmlBlockOpenTr (HtmlBlockTr | !HtmlBlockCloseTr .)* HtmlBlockCloseTr

HtmlBlockOpenScript = "<" Spnl ("script" | "SCRIPT") Spnl HtmlAttribute* ">"
HtmlBlockCloseScript = "<" Spnl "/" ("script" | "SCRIPT") Spnl ">"
HtmlBlockScript = HtmlBlockOpenScript (!HtmlBlockCloseScript .)* HtmlBlockCloseScript


HtmlBlockInTags = HtmlBlockAddress
                | HtmlBlockBlockquote
                | HtmlBlockCenter
                | HtmlBlockDir
                | HtmlBlockDiv
                | HtmlBlockDl
                | HtmlBlockFieldset
                | HtmlBlockForm
                | HtmlBlockH1
                | HtmlBlockH2
                | HtmlBlockH3
                | HtmlBlockH4
                | HtmlBlockH5
                | HtmlBlockH6
                | HtmlBlockMenu
                | HtmlBlockNoframes
                | HtmlBlockNoscript
                | HtmlBlockOl
                | HtmlBlockP
                | HtmlBlockPre
                | HtmlBlockTable
                | HtmlBlockUl
                | HtmlBlockDd
                | HtmlBlockDt
                | HtmlBlockFrameset
                | HtmlBlockLi
                | HtmlBlockTbody
                | HtmlBlockTd
                | HtmlBlockTfoot
                | HtmlBlockTh
                | HtmlBlockThead
                | HtmlBlockTr
                | HtmlBlockScript

HtmlBlock = < ( HtmlBlockInTags | HtmlComment | HtmlBlockSelfClosing ) >
            BlankLine+
            {   raise 'if (extension(EXT_FILTER_HTML)) {
                    $$ = mk_list(LIST, NULL);
                } else {
                    $$ = mk_str(yytext);
                    $$->key = HTMLBLOCK;
                }'
            }

HtmlBlockSelfClosing = "<" Spnl HtmlBlockType Spnl HtmlAttribute* "/" Spnl ">"

HtmlBlockType = "address" | "blockquote" | "center" | "dir" | "div" | "dl" | "fieldset" | "form" | "h1" | "h2" | "h3" |
                "h4" | "h5" | "h6" | "hr" | "isindex" | "menu" | "noframes" | "noscript" | "ol" | "p" | "pre" | "table" |
                "ul" | "dd" | "dt" | "frameset" | "li" | "tbody" | "td" | "tfoot" | "th" | "thead" | "tr" | "script" |
                "ADDRESS" | "BLOCKQUOTE" | "CENTER" | "DIR" | "DIV" | "DL" | "FIELDSET" | "FORM" | "H1" | "H2" | "H3" |
                "H4" | "H5" | "H6" | "HR" | "ISINDEX" | "MENU" | "NOFRAMES" | "NOSCRIPT" | "OL" | "P" | "PRE" | "TABLE" |
                "UL" | "DD" | "DT" | "FRAMESET" | "LI" | "TBODY" | "TD" | "TFOOT" | "TH" | "THEAD" | "TR" | "SCRIPT"

StyleOpen =     "<" Spnl ("style" | "STYLE") Spnl HtmlAttribute* ">"
StyleClose =    "<" Spnl "/" ("style" | "STYLE") Spnl ">"
InStyleTags =   StyleOpen (!StyleClose .)* StyleClose
StyleBlock =    < InStyleTags >
                BlankLine*
                {   raise 'if (extension(EXT_FILTER_STYLES)) {
                        $$ = mk_list(LIST, NULL);
                    } else {
                        $$ = mk_str(yytext);
                        $$->key = HTMLBLOCK;
                    }'
                }

Inlines  =  ( !Endline Inline:i { i }
            | Endline:c &Inline { c } )+:chunks Endline?
            { chunks.join }

Inline  = Str
        | Endline
        | UlOrStarLine
        | Space
        | Strong
        | Emph
        | Image
        | Link
        | NoteReference
        | InlineNote
        | Code
        | RawHtml
        | Entity
        | EscapedChar
        | Smart
        | Symbol

Space = Spacechar+
        { '$$ = mk_str(" ");
          $$->key = SPACE;';
          " " }

Str = StartList:a < NormalChar+ > { a = text } # raise " a = cons(mk_str(yytext), a); " }
      ( StrChunk { raise " a = cons($$, a); " } )*
      { a } #  { raise " if (a->next == NULL) { $$ = a; } else { $$ = mk_list(LIST, a); } " }

StrChunk = < (NormalChar | "_"+ &Alphanumeric)+ > { raise " $$ = mk_str(yytext); " } |
           AposChunk

AposChunk = &{  extension(:EXT_SMART)  } "'" &Alphanumeric
      { raise " $$ = mk_element(APOSTROPHE); " }

EscapedChar =   "\\" !Newline < /[\`|*_{}\[\]()#+.!><-]/ >
                { raise " $$ = mk_str(yytext); " }

Entity =    ( HexEntity | DecEntity | CharEntity )
            { raise " $$ = mk_str(yytext); $$->key = HTML; " }

Endline =   LineBreak | TerminalEndline | NormalEndline

NormalEndline =   Sp Newline !BlankLine !">" !AtxStart
                  !(Line ("===" "="* | "---" "-"*) Newline)
                  { "\n" }

TerminalEndline = Sp Newline Eof
                  { }

LineBreak = "  " NormalEndline
            { raise " $$ = mk_element(LINEBREAK); " }

Symbol =    < SpecialChar >
            { raise " $$ = mk_str(yytext); " }

UlOrStarLine =  (UlLine | StarLine) { raise " $$ = mk_str(yytext); " }
StarLine =      < "****" "*"* > | < Spacechar "*"+ &Spacechar >
UlLine   =      < "____" "_"* > | < Spacechar "_"+ &Spacechar >

Emph =      EmphStar | EmphUl

OneStarOpen  =  !StarLine "*" !Spacechar !Newline
OneStarClose =  !Spacechar !Newline a:inline !StrongStar "*" { raise " $$ = a; " }

EmphStar =  OneStarOpen
            StartList:a
            ( !OneStarClose Inline { raise " a = cons($$, a); " } )*
            OneStarClose { raise " a = cons($$, a); " }
            { raise " $$ = mk_list(EMPH, a); " }

OneUlOpen  =  !UlLine "_" !Spacechar !Newline
OneUlClose =  !Spacechar !Newline a:inline !StrongUl "_" !Alphanumeric { raise " $$ = a; " }

EmphUl =    OneUlOpen
            StartList:a
            ( !OneUlClose Inline { raise " a = cons($$, a); " } )*
            OneUlClose { raise " a = cons($$, a); " }
            { raise " $$ = mk_list(EMPH, a); " }

Strong = StrongStar | StrongUl

TwoStarOpen =   !StarLine "**" !Spacechar !Newline
TwoStarClose =  !Spacechar !Newline a:inline "**" { raise " $$ = a; " }

StrongStar =    TwoStarOpen
                StartList:a
                ( !TwoStarClose Inline { raise " a = cons($$, a); " } )*
                TwoStarClose { raise " a = cons($$, a); " }
                { raise " $$ = mk_list(STRONG, a); " }

TwoUlOpen =     !UlLine "__" !Spacechar !Newline
TwoUlClose =    !Spacechar !Newline a:inline "__" !Alphanumeric { raise " $$ = a; " }

StrongUl =  TwoUlOpen
            StartList:a
            ( !TwoUlClose Inline { raise " a = cons($$, a); " } )*
            TwoUlClose { raise " a = cons($$, a); " }
            { raise " $$ = mk_list(STRONG, a); " }

Image = "!" ( ExplicitLink | ReferenceLink )
        { raise 'if ($$->key == LINK) {
              $$->key = IMAGE;
          } else {
              element *result;
              result = $$;
              $$->children = cons(mk_str("!"), result->children);
          } ' }

Link =  ExplicitLink | ReferenceLink | AutoLink

ReferenceLink = ReferenceLinkDouble | ReferenceLinkSingle

ReferenceLinkDouble =  Label:a < Spnl > !"[]" Label:b
                       {   raise 'link match;
                           if (find_reference(&match, b->children)) {
                               $$ = mk_link(a->children, match.url, match.title);
                               free(a);
                               free_element_list(b);
                           } else {
                               element *result;
                               result = mk_element(LIST);
                               result->children = cons(mk_str("["), cons(a, cons(mk_str("]"), cons(mk_str(yytext),
                                                   cons(mk_str("["), cons(b, mk_str("]")))))));
                               $$ = result;
                           }
                           '
                       }

ReferenceLinkSingle =  Label:a < (Spnl "[]")? >
                       {   raise 'link match;
                           if (find_reference(&match, a->children)) {
                               $$ = mk_link(a->children, match.url, match.title);
                               free(a);
                           }
                           else {
                               element *result;
                               result = mk_element(LIST);
                               result->children = cons(mk_str("["), cons(a, cons(mk_str("]"), mk_str(yytext))));
                               $$ = result;
                           }'
                       }

ExplicitLink =  Label:l Spnl "(" Sp Source:s Spnl Title:t Sp ")"
                { raise '$$ = mk_link(l->children, s->contents.str, t->contents.str);
                  free_element(s);
                  free_element(t);
                  free(l);' }

Source  = ( "<" < SourceContents > ">" | < SourceContents > )
          { raise " $$ = mk_str(yytext); " }

SourceContents = ( ( !"(" !")" !">" Nonspacechar )+ | "(" SourceContents ")")*
                 | ""

Title = ( TitleSingle | TitleDouble | < "" > )
        { raise " $$ = mk_str(yytext); " }

TitleSingle = "'" < ( !( "'" Sp ( ")" | Newline ) ) . )* > "'"

TitleDouble = "\"" < ( !( "\"" Sp ( ")" | Newline ) ) . )* > "\""

AutoLink = AutoLinkUrl | AutoLinkEmail

AutoLinkUrl =   "<" < /[A-Za-z]+/ "://" ( !Newline !">" . )+ > ">"
                { raise "   $$ = mk_link(mk_str(yytext), yytext, ""); " }

AutoLinkEmail = "<" < /[-A-Za-z0-9+_]+/ "@" ( !Newline !">" . )+ > ">"
                {  raise ' char *mailto = malloc(strlen(yytext) + 8);
                    sprintf(mailto, "mailto:%s", yytext);
                    $$ = mk_link(mk_str(yytext), mailto, "");
                    free(mailto);'
                }

Reference = NonindentSpace !"[]" Label:l ":" Spnl RefSrc:s RefTitle:t BlankLine+
            { raise ' $$ = mk_link(l->children, s->contents.str, t->contents.str);
              free_element(s);
              free_element(t);
              free(l);
              $$->key = REFERENCE; '}

Label = "[" ( !"^" &{ raise " extension(EXT_NOTES) " } | &. &{ raise "!extension(EXT_NOTES) " } )
        StartList:a
        ( !"]" Inline { raise " a = cons($$, a); " } )*
        "]"
        { raise " $$ = mk_list(LIST, a); " }

RefSrc = < Nonspacechar+ > 
         { raise '$$ = mk_str(yytext); 
           $$->key = HTML;' }

RefTitle =  ( RefTitleSingle | RefTitleDouble | RefTitleParens | EmptyTitle )
            { raise " $$ = mk_str(yytext); " }

EmptyTitle = < "" >

RefTitleSingle = Spnl "'" < ( !( "'" Sp Newline | Newline ) . )* > "'"

RefTitleDouble = Spnl "\"" < ( !("\"" Sp Newline | Newline) . )* > "\""

RefTitleParens = Spnl "(" < ( !(")" Sp Newline | Newline) . )* > ")"

References = StartList:a
             ( b:reference { raise " a = cons(b, a); " } | SkipBlock )*
             { raise " references = reverse(a); " }

Ticks1 = "`" !"`"
Ticks2 = "``" !"`"
Ticks3 = "```" !"`"
Ticks4 = "````" !"`"
Ticks5 = "`````" !"`"

Code = ( Ticks1 Sp < ( ( !"`" Nonspacechar )+ | !Ticks1 "`"+ | !( Sp Ticks1 ) ( Spacechar | Newline !BlankLine ) )+ > Sp Ticks1
       | Ticks2 Sp < ( ( !"`" Nonspacechar )+ | !Ticks2 "`"+ | !( Sp Ticks2 ) ( Spacechar | Newline !BlankLine ) )+ > Sp Ticks2
       | Ticks3 Sp < ( ( !"`" Nonspacechar )+ | !Ticks3 "`"+ | !( Sp Ticks3 ) ( Spacechar | Newline !BlankLine ) )+ > Sp Ticks3
       | Ticks4 Sp < ( ( !"`" Nonspacechar )+ | !Ticks4 "`"+ | !( Sp Ticks4 ) ( Spacechar | Newline !BlankLine ) )+ > Sp Ticks4
       | Ticks5 Sp < ( ( !"`" Nonspacechar )+ | !Ticks5 "`"+ | !( Sp Ticks5 ) ( Spacechar | Newline !BlankLine ) )+ > Sp Ticks5
       )
       { raise " $$ = mk_str(yytext); $$->key = CODE; " }

RawHtml =   < (HtmlComment | HtmlBlockScript | HtmlTag) >
            {   raise 'if (extension(EXT_FILTER_HTML)) {
                    $$ = mk_list(LIST, NULL);
                } else {
                    $$ = mk_str(yytext);
                    $$->key = HTML;
                }'
            }

BlankLine =     Sp Newline

Quoted =        "\"" (!"\"" .)* "\"" | "'" (!"'" .)* "'"
HtmlAttribute = (AlphanumericAscii | "-")+ Spnl ("=" Spnl (Quoted | (!">" Nonspacechar)+))? Spnl
HtmlComment =   "<!--" (!"-->" .)* "-->"
HtmlTag =       "<" Spnl "/"? AlphanumericAscii+ Spnl HtmlAttribute* "/"? Spnl ">"
Eof =           !.
Spacechar =     " " | "\t"
Nonspacechar =  !Spacechar !Newline .
Newline =       "\n" | "\r" "\n"?
Sp =            Spacechar*
Spnl =          Sp (Newline Sp)?
SpecialChar =   "*" | "_" | "`" | "&" | "[" | "]" | "(" | ")" | "<" | "!" | "#" | "\\" | "'" | "\"" | ExtendedSpecialChar
NormalChar =    !( SpecialChar | Spacechar | Newline ) .
NonAlphanumeric = /[\000-\057\072-\100\133-\140\173-\177]/
Alphanumeric = /[0-9A-Za-z]/ | "\200" | "\201" | "\202" | "\203" | "\204" | "\205" | "\206" | "\207" | "\210" | "\211" | "\212" | "\213" | "\214" | "\215" | "\216" | "\217" | "\220" | "\221" | "\222" | "\223" | "\224" | "\225" | "\226" | "\227" | "\230" | "\231" | "\232" | "\233" | "\234" | "\235" | "\236" | "\237" | "\240" | "\241" | "\242" | "\243" | "\244" | "\245" | "\246" | "\247" | "\250" | "\251" | "\252" | "\253" | "\254" | "\255" | "\256" | "\257" | "\260" | "\261" | "\262" | "\263" | "\264" | "\265" | "\266" | "\267" | "\270" | "\271" | "\272" | "\273" | "\274" | "\275" | "\276" | "\277" | "\300" | "\301" | "\302" | "\303" | "\304" | "\305" | "\306" | "\307" | "\310" | "\311" | "\312" | "\313" | "\314" | "\315" | "\316" | "\317" | "\320" | "\321" | "\322" | "\323" | "\324" | "\325" | "\326" | "\327" | "\330" | "\331" | "\332" | "\333" | "\334" | "\335" | "\336" | "\337" | "\340" | "\341" | "\342" | "\343" | "\344" | "\345" | "\346" | "\347" | "\350" | "\351" | "\352" | "\353" | "\354" | "\355" | "\356" | "\357" | "\360" | "\361" | "\362" | "\363" | "\364" | "\365" | "\366" | "\367" | "\370" | "\371" | "\372" | "\373" | "\374" | "\375" | "\376" | "\377"
AlphanumericAscii = /[A-Za-z0-9]/
Digit = [0-9]
BOM = "\357\273\277"

HexEntity =     < "&" "#" /[Xx]/ /[0-9a-fA-F]+/ ";" >
DecEntity =     < "&" "#" /[0-9]+/ ";" >
CharEntity =    < "&" /[A-Za-z0-9]+/ ";" >

NonindentSpace =    "   " | "  " | " " | ""
Indent =            "\t" | "    "
IndentedLine =      Indent Line
OptionallyIndentedLine = Indent? Line

# StartList starts a list data structure that can be added to with cons:
StartList = &.
            { [] }

Line =  RawLine:a { a }
RawLine = ( < (!"\r" !"\n" .)* Newline > { text }
        | < .+ > Eof )

SkipBlock = ( !BlankLine RawLine )+ BlankLine*
          | BlankLine+

# Syntax extensions

ExtendedSpecialChar = &{ extension(:EXT_SMART) } ("." | "-" | "'" | "\"")
                    | &{ extension(:EXT_NOTES) } ( "^" )

Smart = &{  extension(:EXT_SMART)  }
        ( Ellipsis | Dash | SingleQuoted | DoubleQuoted | Apostrophe )

Apostrophe = "'"
             { raise " $$ = mk_element(APOSTROPHE); " }

Ellipsis = ("..." | ". . .")
           { raise " $$ = mk_element(ELLIPSIS); " }

Dash = EmDash | EnDash

EnDash = "-" &Digit
         { raise " $$ = mk_element(ENDASH); " }

EmDash = ("---" | "--")
         { raise " $$ = mk_element(EMDASH); " }

SingleQuoteStart = "'" !(Spacechar | Newline)

SingleQuoteEnd = "'" !Alphanumeric

SingleQuoted = SingleQuoteStart
               StartList:a
               ( !SingleQuoteEnd b:inline { raise " a = cons(b, a); " } )+
               SingleQuoteEnd
               { raise " $$ = mk_list(SINGLEQUOTED, a); " }

DoubleQuoteStart = "\""

DoubleQuoteEnd = "\""

DoubleQuoted =  DoubleQuoteStart
                StartList:a
                ( !DoubleQuoteEnd b:inline { raise " a = cons(b, a); " } )+
                DoubleQuoteEnd
                { raise " $$ = mk_list(DOUBLEQUOTED, a); " }

NoteReference = &{ extension(:EXT_NOTES) }
                RawNoteReference:ref
                {   raise 'element *match;
                    if (find_note(&match, ref->contents.str)) {
                        $$ = mk_element(NOTE);
                        assert(match->children != NULL);
                        $$->children = match->children;
                        $$->contents.str = 0;
                    } else {
                        char *s;
                        s = malloc(strlen(ref->contents.str) + 4);
                        sprintf(s, "[^%s]", ref->contents.str);
                        $$ = mk_str(s);
                        free(s);
                    }'
                }

RawNoteReference = "[^" < ( !Newline !"]" . )+ > "]"
                   { raise " $$ = mk_str(yytext); " }

Note =          &{ extension(:EXT_NOTES) }
                NonindentSpace ref:rawNoteReference ":" Sp
                StartList:a
                ( RawNoteBlock { raise " a = cons($$, a); " } )
                ( &Indent RawNoteBlock { raise " a = cons($$, a); " } )*
                {   raise '$$ = mk_list(NOTE, a);
                    $$->contents.str = strdup(ref->contents.str); '
                }

InlineNote =    &{ extension(:EXT_NOTES) }
                "^["
                StartList:a
                ( !"]" Inline { raise " a = cons($$, a); " } )+
                "]"
                { raise '$$ = mk_list(NOTE, a);
                  $$->contents.str = 0; '}

Notes =         StartList:a
                ( b:note { raise " a = cons(b, a); " } | SkipBlock )*
                { raise " notes = reverse(a); " }

RawNoteBlock =  StartList:a
                    ( !BlankLine OptionallyIndentedLine { raise " a = cons($$, a); " } )+
                ( < BlankLine* > { raise " a = cons(mk_str(yytext), a); " } )
                {   raise '$$ = mk_str_from_list(a, true);
                    $$->key = RAW; '
                }

